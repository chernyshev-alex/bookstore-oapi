// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package rest

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// BookJson defines model for BookJson.
type BookJson struct {
	Author      string `json:"author"`
	AuthorId    int    `json:"authorId"`
	Descr       string `json:"descr"`
	Id          int    `json:"id"`
	Isbn        string `json:"isbn"`
	Publisher   string `json:"publisher"`
	PublisherId int    `json:"publisherId"`
	Title       string `json:"title"`
	Year        int    `json:"year"`
}

// BookId defines model for bookId.
type BookId = string

// AddBookResponse defines model for AddBookResponse.
type AddBookResponse struct {
	Book BookJson `json:"book"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// SearchBooksResponse defines model for SearchBooksResponse.
type SearchBooksResponse = []BookJson

// AddBookRequest defines model for AddBookRequest.
type AddBookRequest = BookJson

// BooksByAuthorIdParams defines parameters for BooksByAuthorId.
type BooksByAuthorIdParams struct {
	AuthorId string `form:"authorId" json:"authorId"`
}

// AddBookJSONRequestBody defines body for AddBook for application/json ContentType.
type AddBookJSONRequestBody = AddBookRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new book
	// (POST /books)
	AddBook(c *gin.Context)

	// (DELETE /books/{bookId})
	DeleteBook(c *gin.Context, bookId BookId)

	// (GET /search/books)
	BooksByAuthorId(c *gin.Context, params BooksByAuthorIdParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// AddBook operation middleware
func (siw *ServerInterfaceWrapper) AddBook(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddBook(c)
}

// DeleteBook operation middleware
func (siw *ServerInterfaceWrapper) DeleteBook(c *gin.Context) {

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId BookId

	err = runtime.BindStyledParameter("simple", false, "bookId", c.Param("bookId"), &bookId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter bookId: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteBook(c, bookId)
}

// BooksByAuthorId operation middleware
func (siw *ServerInterfaceWrapper) BooksByAuthorId(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params BooksByAuthorIdParams

	// ------------- Required query parameter "authorId" -------------
	if paramValue := c.Query("authorId"); paramValue != "" {

	} else {
		c.JSON(http.StatusBadRequest, gin.H{"msg": "Query argument authorId is required, but not found"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "authorId", c.Request.URL.Query(), &params.AuthorId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter authorId: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.BooksByAuthorId(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.POST(options.BaseURL+"/books", wrapper.AddBook)

	router.DELETE(options.BaseURL+"/books/:bookId", wrapper.DeleteBook)

	router.GET(options.BaseURL+"/search/books", wrapper.BooksByAuthorId)

	return router
}
