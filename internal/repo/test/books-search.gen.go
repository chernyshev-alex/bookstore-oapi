// Code generated by counterfeiter. DO NOT EDIT.
package test

import (
	"context"
	"sync"

	"github.com/chernyshev-alex/go-bookstore-oapi/internal/models"
	"github.com/chernyshev-alex/go-bookstore-oapi/internal/repo"
)

type FakeBooksSearchRepository struct {
	BooksByAuthorIdStub        func(context.Context, int64) ([]*models.Book, error)
	booksByAuthorIdMutex       sync.RWMutex
	booksByAuthorIdArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	booksByAuthorIdReturns struct {
		result1 []*models.Book
		result2 error
	}
	booksByAuthorIdReturnsOnCall map[int]struct {
		result1 []*models.Book
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBooksSearchRepository) BooksByAuthorId(arg1 context.Context, arg2 int64) ([]*models.Book, error) {
	fake.booksByAuthorIdMutex.Lock()
	ret, specificReturn := fake.booksByAuthorIdReturnsOnCall[len(fake.booksByAuthorIdArgsForCall)]
	fake.booksByAuthorIdArgsForCall = append(fake.booksByAuthorIdArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.BooksByAuthorIdStub
	fakeReturns := fake.booksByAuthorIdReturns
	fake.recordInvocation("BooksByAuthorId", []interface{}{arg1, arg2})
	fake.booksByAuthorIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBooksSearchRepository) BooksByAuthorIdCallCount() int {
	fake.booksByAuthorIdMutex.RLock()
	defer fake.booksByAuthorIdMutex.RUnlock()
	return len(fake.booksByAuthorIdArgsForCall)
}

func (fake *FakeBooksSearchRepository) BooksByAuthorIdCalls(stub func(context.Context, int64) ([]*models.Book, error)) {
	fake.booksByAuthorIdMutex.Lock()
	defer fake.booksByAuthorIdMutex.Unlock()
	fake.BooksByAuthorIdStub = stub
}

func (fake *FakeBooksSearchRepository) BooksByAuthorIdArgsForCall(i int) (context.Context, int64) {
	fake.booksByAuthorIdMutex.RLock()
	defer fake.booksByAuthorIdMutex.RUnlock()
	argsForCall := fake.booksByAuthorIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBooksSearchRepository) BooksByAuthorIdReturns(result1 []*models.Book, result2 error) {
	fake.booksByAuthorIdMutex.Lock()
	defer fake.booksByAuthorIdMutex.Unlock()
	fake.BooksByAuthorIdStub = nil
	fake.booksByAuthorIdReturns = struct {
		result1 []*models.Book
		result2 error
	}{result1, result2}
}

func (fake *FakeBooksSearchRepository) BooksByAuthorIdReturnsOnCall(i int, result1 []*models.Book, result2 error) {
	fake.booksByAuthorIdMutex.Lock()
	defer fake.booksByAuthorIdMutex.Unlock()
	fake.BooksByAuthorIdStub = nil
	if fake.booksByAuthorIdReturnsOnCall == nil {
		fake.booksByAuthorIdReturnsOnCall = make(map[int]struct {
			result1 []*models.Book
			result2 error
		})
	}
	fake.booksByAuthorIdReturnsOnCall[i] = struct {
		result1 []*models.Book
		result2 error
	}{result1, result2}
}

func (fake *FakeBooksSearchRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.booksByAuthorIdMutex.RLock()
	defer fake.booksByAuthorIdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBooksSearchRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repo.BooksSearchRepository = new(FakeBooksSearchRepository)
