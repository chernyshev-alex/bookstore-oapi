// Code generated by counterfeiter. DO NOT EDIT.
package test

import (
	"context"
	"sync"

	"github.com/chernyshev-alex/go-bookstore-oapi/internal/gen"
	"github.com/chernyshev-alex/go-bookstore-oapi/internal/repo"
)

type FakeBooksSearchRepository struct {
	SearchByAuthorStub        func(context.Context, gen.SearchBooksByAuthorParams) ([]gen.Book, error)
	searchByAuthorMutex       sync.RWMutex
	searchByAuthorArgsForCall []struct {
		arg1 context.Context
		arg2 gen.SearchBooksByAuthorParams
	}
	searchByAuthorReturns struct {
		result1 []gen.Book
		result2 error
	}
	searchByAuthorReturnsOnCall map[int]struct {
		result1 []gen.Book
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBooksSearchRepository) SearchByAuthor(arg1 context.Context, arg2 gen.SearchBooksByAuthorParams) ([]gen.Book, error) {
	fake.searchByAuthorMutex.Lock()
	ret, specificReturn := fake.searchByAuthorReturnsOnCall[len(fake.searchByAuthorArgsForCall)]
	fake.searchByAuthorArgsForCall = append(fake.searchByAuthorArgsForCall, struct {
		arg1 context.Context
		arg2 gen.SearchBooksByAuthorParams
	}{arg1, arg2})
	stub := fake.SearchByAuthorStub
	fakeReturns := fake.searchByAuthorReturns
	fake.recordInvocation("SearchByAuthor", []interface{}{arg1, arg2})
	fake.searchByAuthorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBooksSearchRepository) SearchByAuthorCallCount() int {
	fake.searchByAuthorMutex.RLock()
	defer fake.searchByAuthorMutex.RUnlock()
	return len(fake.searchByAuthorArgsForCall)
}

func (fake *FakeBooksSearchRepository) SearchByAuthorCalls(stub func(context.Context, gen.SearchBooksByAuthorParams) ([]gen.Book, error)) {
	fake.searchByAuthorMutex.Lock()
	defer fake.searchByAuthorMutex.Unlock()
	fake.SearchByAuthorStub = stub
}

func (fake *FakeBooksSearchRepository) SearchByAuthorArgsForCall(i int) (context.Context, gen.SearchBooksByAuthorParams) {
	fake.searchByAuthorMutex.RLock()
	defer fake.searchByAuthorMutex.RUnlock()
	argsForCall := fake.searchByAuthorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBooksSearchRepository) SearchByAuthorReturns(result1 []gen.Book, result2 error) {
	fake.searchByAuthorMutex.Lock()
	defer fake.searchByAuthorMutex.Unlock()
	fake.SearchByAuthorStub = nil
	fake.searchByAuthorReturns = struct {
		result1 []gen.Book
		result2 error
	}{result1, result2}
}

func (fake *FakeBooksSearchRepository) SearchByAuthorReturnsOnCall(i int, result1 []gen.Book, result2 error) {
	fake.searchByAuthorMutex.Lock()
	defer fake.searchByAuthorMutex.Unlock()
	fake.SearchByAuthorStub = nil
	if fake.searchByAuthorReturnsOnCall == nil {
		fake.searchByAuthorReturnsOnCall = make(map[int]struct {
			result1 []gen.Book
			result2 error
		})
	}
	fake.searchByAuthorReturnsOnCall[i] = struct {
		result1 []gen.Book
		result2 error
	}{result1, result2}
}

func (fake *FakeBooksSearchRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.searchByAuthorMutex.RLock()
	defer fake.searchByAuthorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBooksSearchRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repo.BooksSearchRepository = new(FakeBooksSearchRepository)
