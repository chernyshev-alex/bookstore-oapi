// Code generated by counterfeiter. DO NOT EDIT.
package test

import (
	"context"
	"sync"

	"github.com/chernyshev-alex/go-bookstore-oapi/internal/gen"
	"github.com/chernyshev-alex/go-bookstore-oapi/internal/service"
)

type FakeBooksService struct {
	AddBookStub        func(context.Context, gen.Book) (gen.Book, error)
	addBookMutex       sync.RWMutex
	addBookArgsForCall []struct {
		arg1 context.Context
		arg2 gen.Book
	}
	addBookReturns struct {
		result1 gen.Book
		result2 error
	}
	addBookReturnsOnCall map[int]struct {
		result1 gen.Book
		result2 error
	}
	DeleteBookStub        func(context.Context, int) error
	deleteBookMutex       sync.RWMutex
	deleteBookArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	deleteBookReturns struct {
		result1 error
	}
	deleteBookReturnsOnCall map[int]struct {
		result1 error
	}
	SearchBooksByAuthorStub        func(context.Context, gen.SearchBooksByAuthorParams) ([]gen.Book, error)
	searchBooksByAuthorMutex       sync.RWMutex
	searchBooksByAuthorArgsForCall []struct {
		arg1 context.Context
		arg2 gen.SearchBooksByAuthorParams
	}
	searchBooksByAuthorReturns struct {
		result1 []gen.Book
		result2 error
	}
	searchBooksByAuthorReturnsOnCall map[int]struct {
		result1 []gen.Book
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBooksService) AddBook(arg1 context.Context, arg2 gen.Book) (gen.Book, error) {
	fake.addBookMutex.Lock()
	ret, specificReturn := fake.addBookReturnsOnCall[len(fake.addBookArgsForCall)]
	fake.addBookArgsForCall = append(fake.addBookArgsForCall, struct {
		arg1 context.Context
		arg2 gen.Book
	}{arg1, arg2})
	stub := fake.AddBookStub
	fakeReturns := fake.addBookReturns
	fake.recordInvocation("AddBook", []interface{}{arg1, arg2})
	fake.addBookMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBooksService) AddBookCallCount() int {
	fake.addBookMutex.RLock()
	defer fake.addBookMutex.RUnlock()
	return len(fake.addBookArgsForCall)
}

func (fake *FakeBooksService) AddBookCalls(stub func(context.Context, gen.Book) (gen.Book, error)) {
	fake.addBookMutex.Lock()
	defer fake.addBookMutex.Unlock()
	fake.AddBookStub = stub
}

func (fake *FakeBooksService) AddBookArgsForCall(i int) (context.Context, gen.Book) {
	fake.addBookMutex.RLock()
	defer fake.addBookMutex.RUnlock()
	argsForCall := fake.addBookArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBooksService) AddBookReturns(result1 gen.Book, result2 error) {
	fake.addBookMutex.Lock()
	defer fake.addBookMutex.Unlock()
	fake.AddBookStub = nil
	fake.addBookReturns = struct {
		result1 gen.Book
		result2 error
	}{result1, result2}
}

func (fake *FakeBooksService) AddBookReturnsOnCall(i int, result1 gen.Book, result2 error) {
	fake.addBookMutex.Lock()
	defer fake.addBookMutex.Unlock()
	fake.AddBookStub = nil
	if fake.addBookReturnsOnCall == nil {
		fake.addBookReturnsOnCall = make(map[int]struct {
			result1 gen.Book
			result2 error
		})
	}
	fake.addBookReturnsOnCall[i] = struct {
		result1 gen.Book
		result2 error
	}{result1, result2}
}

func (fake *FakeBooksService) DeleteBook(arg1 context.Context, arg2 int) error {
	fake.deleteBookMutex.Lock()
	ret, specificReturn := fake.deleteBookReturnsOnCall[len(fake.deleteBookArgsForCall)]
	fake.deleteBookArgsForCall = append(fake.deleteBookArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.DeleteBookStub
	fakeReturns := fake.deleteBookReturns
	fake.recordInvocation("DeleteBook", []interface{}{arg1, arg2})
	fake.deleteBookMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBooksService) DeleteBookCallCount() int {
	fake.deleteBookMutex.RLock()
	defer fake.deleteBookMutex.RUnlock()
	return len(fake.deleteBookArgsForCall)
}

func (fake *FakeBooksService) DeleteBookCalls(stub func(context.Context, int) error) {
	fake.deleteBookMutex.Lock()
	defer fake.deleteBookMutex.Unlock()
	fake.DeleteBookStub = stub
}

func (fake *FakeBooksService) DeleteBookArgsForCall(i int) (context.Context, int) {
	fake.deleteBookMutex.RLock()
	defer fake.deleteBookMutex.RUnlock()
	argsForCall := fake.deleteBookArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBooksService) DeleteBookReturns(result1 error) {
	fake.deleteBookMutex.Lock()
	defer fake.deleteBookMutex.Unlock()
	fake.DeleteBookStub = nil
	fake.deleteBookReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBooksService) DeleteBookReturnsOnCall(i int, result1 error) {
	fake.deleteBookMutex.Lock()
	defer fake.deleteBookMutex.Unlock()
	fake.DeleteBookStub = nil
	if fake.deleteBookReturnsOnCall == nil {
		fake.deleteBookReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBookReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBooksService) SearchBooksByAuthor(arg1 context.Context, arg2 gen.SearchBooksByAuthorParams) ([]gen.Book, error) {
	fake.searchBooksByAuthorMutex.Lock()
	ret, specificReturn := fake.searchBooksByAuthorReturnsOnCall[len(fake.searchBooksByAuthorArgsForCall)]
	fake.searchBooksByAuthorArgsForCall = append(fake.searchBooksByAuthorArgsForCall, struct {
		arg1 context.Context
		arg2 gen.SearchBooksByAuthorParams
	}{arg1, arg2})
	stub := fake.SearchBooksByAuthorStub
	fakeReturns := fake.searchBooksByAuthorReturns
	fake.recordInvocation("SearchBooksByAuthor", []interface{}{arg1, arg2})
	fake.searchBooksByAuthorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBooksService) SearchBooksByAuthorCallCount() int {
	fake.searchBooksByAuthorMutex.RLock()
	defer fake.searchBooksByAuthorMutex.RUnlock()
	return len(fake.searchBooksByAuthorArgsForCall)
}

func (fake *FakeBooksService) SearchBooksByAuthorCalls(stub func(context.Context, gen.SearchBooksByAuthorParams) ([]gen.Book, error)) {
	fake.searchBooksByAuthorMutex.Lock()
	defer fake.searchBooksByAuthorMutex.Unlock()
	fake.SearchBooksByAuthorStub = stub
}

func (fake *FakeBooksService) SearchBooksByAuthorArgsForCall(i int) (context.Context, gen.SearchBooksByAuthorParams) {
	fake.searchBooksByAuthorMutex.RLock()
	defer fake.searchBooksByAuthorMutex.RUnlock()
	argsForCall := fake.searchBooksByAuthorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBooksService) SearchBooksByAuthorReturns(result1 []gen.Book, result2 error) {
	fake.searchBooksByAuthorMutex.Lock()
	defer fake.searchBooksByAuthorMutex.Unlock()
	fake.SearchBooksByAuthorStub = nil
	fake.searchBooksByAuthorReturns = struct {
		result1 []gen.Book
		result2 error
	}{result1, result2}
}

func (fake *FakeBooksService) SearchBooksByAuthorReturnsOnCall(i int, result1 []gen.Book, result2 error) {
	fake.searchBooksByAuthorMutex.Lock()
	defer fake.searchBooksByAuthorMutex.Unlock()
	fake.SearchBooksByAuthorStub = nil
	if fake.searchBooksByAuthorReturnsOnCall == nil {
		fake.searchBooksByAuthorReturnsOnCall = make(map[int]struct {
			result1 []gen.Book
			result2 error
		})
	}
	fake.searchBooksByAuthorReturnsOnCall[i] = struct {
		result1 []gen.Book
		result2 error
	}{result1, result2}
}

func (fake *FakeBooksService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addBookMutex.RLock()
	defer fake.addBookMutex.RUnlock()
	fake.deleteBookMutex.RLock()
	defer fake.deleteBookMutex.RUnlock()
	fake.searchBooksByAuthorMutex.RLock()
	defer fake.searchBooksByAuthorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBooksService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.BooksService = new(FakeBooksService)
